// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-recipe-api/models"
	"github.com/ONSdigital/dp-recipe-api/store"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"sync"
)

// Ensure, that MongoDBMock does implement store.MongoDB.
// If this is not the case, regenerate this file with moq.
var _ store.MongoDB = &MongoDBMock{}

// MongoDBMock is a mock implementation of store.MongoDB.
//
// 	func TestSomethingThatUsesMongoDB(t *testing.T) {
//
// 		// make and configure a mocked store.MongoDB
// 		mockedMongoDB := &MongoDBMock{
// 			AddCodelistFunc: func(ctx context.Context, recipeID string, instanceIndex int, currentRecipe *models.Recipe) error {
// 				panic("mock out the AddCodelist method")
// 			},
// 			AddRecipeFunc: func(ctx context.Context, item models.Recipe) error {
// 				panic("mock out the AddRecipe method")
// 			},
// 			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(contextMoqParam context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			GetRecipeFunc: func(ctx context.Context, id string) (*models.Recipe, error) {
// 				panic("mock out the GetRecipe method")
// 			},
// 			GetRecipesFunc: func(ctx context.Context, offset int, limit int) (*models.RecipeResults, error) {
// 				panic("mock out the GetRecipes method")
// 			},
// 			UpdateAllRecipeFunc: func(ctx context.Context, id string, update primitive.M) error {
// 				panic("mock out the UpdateAllRecipe method")
// 			},
// 			UpdateCodelistFunc: func(ctx context.Context, recipeID string, instanceIndex int, codelistIndex int, updates models.CodeList) error {
// 				panic("mock out the UpdateCodelist method")
// 			},
// 			UpdateInstanceFunc: func(ctx context.Context, recipeID string, instanceIndex int, updates models.Instance) error {
// 				panic("mock out the UpdateInstance method")
// 			},
// 			UpdateRecipeFunc: func(ctx context.Context, recipeID string, updates models.Recipe) error {
// 				panic("mock out the UpdateRecipe method")
// 			},
// 		}
//
// 		// use mockedMongoDB in code that requires store.MongoDB
// 		// and then make assertions.
//
// 	}
type MongoDBMock struct {
	// AddCodelistFunc mocks the AddCodelist method.
	AddCodelistFunc func(ctx context.Context, recipeID string, instanceIndex int, currentRecipe *models.Recipe) error

	// AddRecipeFunc mocks the AddRecipe method.
	AddRecipeFunc func(ctx context.Context, item models.Recipe) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(contextMoqParam context.Context) error

	// GetRecipeFunc mocks the GetRecipe method.
	GetRecipeFunc func(ctx context.Context, id string) (*models.Recipe, error)

	// GetRecipesFunc mocks the GetRecipes method.
	GetRecipesFunc func(ctx context.Context, offset int, limit int) (*models.RecipeResults, error)

	// UpdateAllRecipeFunc mocks the UpdateAllRecipe method.
	UpdateAllRecipeFunc func(ctx context.Context, id string, update primitive.M) error

	// UpdateCodelistFunc mocks the UpdateCodelist method.
	UpdateCodelistFunc func(ctx context.Context, recipeID string, instanceIndex int, codelistIndex int, updates models.CodeList) error

	// UpdateInstanceFunc mocks the UpdateInstance method.
	UpdateInstanceFunc func(ctx context.Context, recipeID string, instanceIndex int, updates models.Instance) error

	// UpdateRecipeFunc mocks the UpdateRecipe method.
	UpdateRecipeFunc func(ctx context.Context, recipeID string, updates models.Recipe) error

	// calls tracks calls to the methods.
	calls struct {
		// AddCodelist holds details about calls to the AddCodelist method.
		AddCodelist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecipeID is the recipeID argument value.
			RecipeID string
			// InstanceIndex is the instanceIndex argument value.
			InstanceIndex int
			// CurrentRecipe is the currentRecipe argument value.
			CurrentRecipe *models.Recipe
		}
		// AddRecipe holds details about calls to the AddRecipe method.
		AddRecipe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Item is the item argument value.
			Item models.Recipe
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// GetRecipe holds details about calls to the GetRecipe method.
		GetRecipe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetRecipes holds details about calls to the GetRecipes method.
		GetRecipes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Offset is the offset argument value.
			Offset int
			// Limit is the limit argument value.
			Limit int
		}
		// UpdateAllRecipe holds details about calls to the UpdateAllRecipe method.
		UpdateAllRecipe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Update is the update argument value.
			Update primitive.M
		}
		// UpdateCodelist holds details about calls to the UpdateCodelist method.
		UpdateCodelist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecipeID is the recipeID argument value.
			RecipeID string
			// InstanceIndex is the instanceIndex argument value.
			InstanceIndex int
			// CodelistIndex is the codelistIndex argument value.
			CodelistIndex int
			// Updates is the updates argument value.
			Updates models.CodeList
		}
		// UpdateInstance holds details about calls to the UpdateInstance method.
		UpdateInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecipeID is the recipeID argument value.
			RecipeID string
			// InstanceIndex is the instanceIndex argument value.
			InstanceIndex int
			// Updates is the updates argument value.
			Updates models.Instance
		}
		// UpdateRecipe holds details about calls to the UpdateRecipe method.
		UpdateRecipe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecipeID is the recipeID argument value.
			RecipeID string
			// Updates is the updates argument value.
			Updates models.Recipe
		}
	}
	lockAddCodelist     sync.RWMutex
	lockAddRecipe       sync.RWMutex
	lockChecker         sync.RWMutex
	lockClose           sync.RWMutex
	lockGetRecipe       sync.RWMutex
	lockGetRecipes      sync.RWMutex
	lockUpdateAllRecipe sync.RWMutex
	lockUpdateCodelist  sync.RWMutex
	lockUpdateInstance  sync.RWMutex
	lockUpdateRecipe    sync.RWMutex
}

// AddCodelist calls AddCodelistFunc.
func (mock *MongoDBMock) AddCodelist(ctx context.Context, recipeID string, instanceIndex int, currentRecipe *models.Recipe) error {
	if mock.AddCodelistFunc == nil {
		panic("MongoDBMock.AddCodelistFunc: method is nil but MongoDB.AddCodelist was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecipeID      string
		InstanceIndex int
		CurrentRecipe *models.Recipe
	}{
		Ctx:           ctx,
		RecipeID:      recipeID,
		InstanceIndex: instanceIndex,
		CurrentRecipe: currentRecipe,
	}
	mock.lockAddCodelist.Lock()
	mock.calls.AddCodelist = append(mock.calls.AddCodelist, callInfo)
	mock.lockAddCodelist.Unlock()
	return mock.AddCodelistFunc(ctx, recipeID, instanceIndex, currentRecipe)
}

// AddCodelistCalls gets all the calls that were made to AddCodelist.
// Check the length with:
//     len(mockedMongoDB.AddCodelistCalls())
func (mock *MongoDBMock) AddCodelistCalls() []struct {
	Ctx           context.Context
	RecipeID      string
	InstanceIndex int
	CurrentRecipe *models.Recipe
} {
	var calls []struct {
		Ctx           context.Context
		RecipeID      string
		InstanceIndex int
		CurrentRecipe *models.Recipe
	}
	mock.lockAddCodelist.RLock()
	calls = mock.calls.AddCodelist
	mock.lockAddCodelist.RUnlock()
	return calls
}

// AddRecipe calls AddRecipeFunc.
func (mock *MongoDBMock) AddRecipe(ctx context.Context, item models.Recipe) error {
	if mock.AddRecipeFunc == nil {
		panic("MongoDBMock.AddRecipeFunc: method is nil but MongoDB.AddRecipe was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Item models.Recipe
	}{
		Ctx:  ctx,
		Item: item,
	}
	mock.lockAddRecipe.Lock()
	mock.calls.AddRecipe = append(mock.calls.AddRecipe, callInfo)
	mock.lockAddRecipe.Unlock()
	return mock.AddRecipeFunc(ctx, item)
}

// AddRecipeCalls gets all the calls that were made to AddRecipe.
// Check the length with:
//     len(mockedMongoDB.AddRecipeCalls())
func (mock *MongoDBMock) AddRecipeCalls() []struct {
	Ctx  context.Context
	Item models.Recipe
} {
	var calls []struct {
		Ctx  context.Context
		Item models.Recipe
	}
	mock.lockAddRecipe.RLock()
	calls = mock.calls.AddRecipe
	mock.lockAddRecipe.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *MongoDBMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("MongoDBMock.CheckerFunc: method is nil but MongoDB.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedMongoDB.CheckerCalls())
func (mock *MongoDBMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *MongoDBMock) Close(contextMoqParam context.Context) error {
	if mock.CloseFunc == nil {
		panic("MongoDBMock.CloseFunc: method is nil but MongoDB.Close was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(contextMoqParam)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedMongoDB.CloseCalls())
func (mock *MongoDBMock) CloseCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetRecipe calls GetRecipeFunc.
func (mock *MongoDBMock) GetRecipe(ctx context.Context, id string) (*models.Recipe, error) {
	if mock.GetRecipeFunc == nil {
		panic("MongoDBMock.GetRecipeFunc: method is nil but MongoDB.GetRecipe was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetRecipe.Lock()
	mock.calls.GetRecipe = append(mock.calls.GetRecipe, callInfo)
	mock.lockGetRecipe.Unlock()
	return mock.GetRecipeFunc(ctx, id)
}

// GetRecipeCalls gets all the calls that were made to GetRecipe.
// Check the length with:
//     len(mockedMongoDB.GetRecipeCalls())
func (mock *MongoDBMock) GetRecipeCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetRecipe.RLock()
	calls = mock.calls.GetRecipe
	mock.lockGetRecipe.RUnlock()
	return calls
}

// GetRecipes calls GetRecipesFunc.
func (mock *MongoDBMock) GetRecipes(ctx context.Context, offset int, limit int) (*models.RecipeResults, error) {
	if mock.GetRecipesFunc == nil {
		panic("MongoDBMock.GetRecipesFunc: method is nil but MongoDB.GetRecipes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}{
		Ctx:    ctx,
		Offset: offset,
		Limit:  limit,
	}
	mock.lockGetRecipes.Lock()
	mock.calls.GetRecipes = append(mock.calls.GetRecipes, callInfo)
	mock.lockGetRecipes.Unlock()
	return mock.GetRecipesFunc(ctx, offset, limit)
}

// GetRecipesCalls gets all the calls that were made to GetRecipes.
// Check the length with:
//     len(mockedMongoDB.GetRecipesCalls())
func (mock *MongoDBMock) GetRecipesCalls() []struct {
	Ctx    context.Context
	Offset int
	Limit  int
} {
	var calls []struct {
		Ctx    context.Context
		Offset int
		Limit  int
	}
	mock.lockGetRecipes.RLock()
	calls = mock.calls.GetRecipes
	mock.lockGetRecipes.RUnlock()
	return calls
}

// UpdateAllRecipe calls UpdateAllRecipeFunc.
func (mock *MongoDBMock) UpdateAllRecipe(ctx context.Context, id string, update primitive.M) error {
	if mock.UpdateAllRecipeFunc == nil {
		panic("MongoDBMock.UpdateAllRecipeFunc: method is nil but MongoDB.UpdateAllRecipe was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		Update primitive.M
	}{
		Ctx:    ctx,
		ID:     id,
		Update: update,
	}
	mock.lockUpdateAllRecipe.Lock()
	mock.calls.UpdateAllRecipe = append(mock.calls.UpdateAllRecipe, callInfo)
	mock.lockUpdateAllRecipe.Unlock()
	return mock.UpdateAllRecipeFunc(ctx, id, update)
}

// UpdateAllRecipeCalls gets all the calls that were made to UpdateAllRecipe.
// Check the length with:
//     len(mockedMongoDB.UpdateAllRecipeCalls())
func (mock *MongoDBMock) UpdateAllRecipeCalls() []struct {
	Ctx    context.Context
	ID     string
	Update primitive.M
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		Update primitive.M
	}
	mock.lockUpdateAllRecipe.RLock()
	calls = mock.calls.UpdateAllRecipe
	mock.lockUpdateAllRecipe.RUnlock()
	return calls
}

// UpdateCodelist calls UpdateCodelistFunc.
func (mock *MongoDBMock) UpdateCodelist(ctx context.Context, recipeID string, instanceIndex int, codelistIndex int, updates models.CodeList) error {
	if mock.UpdateCodelistFunc == nil {
		panic("MongoDBMock.UpdateCodelistFunc: method is nil but MongoDB.UpdateCodelist was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecipeID      string
		InstanceIndex int
		CodelistIndex int
		Updates       models.CodeList
	}{
		Ctx:           ctx,
		RecipeID:      recipeID,
		InstanceIndex: instanceIndex,
		CodelistIndex: codelistIndex,
		Updates:       updates,
	}
	mock.lockUpdateCodelist.Lock()
	mock.calls.UpdateCodelist = append(mock.calls.UpdateCodelist, callInfo)
	mock.lockUpdateCodelist.Unlock()
	return mock.UpdateCodelistFunc(ctx, recipeID, instanceIndex, codelistIndex, updates)
}

// UpdateCodelistCalls gets all the calls that were made to UpdateCodelist.
// Check the length with:
//     len(mockedMongoDB.UpdateCodelistCalls())
func (mock *MongoDBMock) UpdateCodelistCalls() []struct {
	Ctx           context.Context
	RecipeID      string
	InstanceIndex int
	CodelistIndex int
	Updates       models.CodeList
} {
	var calls []struct {
		Ctx           context.Context
		RecipeID      string
		InstanceIndex int
		CodelistIndex int
		Updates       models.CodeList
	}
	mock.lockUpdateCodelist.RLock()
	calls = mock.calls.UpdateCodelist
	mock.lockUpdateCodelist.RUnlock()
	return calls
}

// UpdateInstance calls UpdateInstanceFunc.
func (mock *MongoDBMock) UpdateInstance(ctx context.Context, recipeID string, instanceIndex int, updates models.Instance) error {
	if mock.UpdateInstanceFunc == nil {
		panic("MongoDBMock.UpdateInstanceFunc: method is nil but MongoDB.UpdateInstance was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecipeID      string
		InstanceIndex int
		Updates       models.Instance
	}{
		Ctx:           ctx,
		RecipeID:      recipeID,
		InstanceIndex: instanceIndex,
		Updates:       updates,
	}
	mock.lockUpdateInstance.Lock()
	mock.calls.UpdateInstance = append(mock.calls.UpdateInstance, callInfo)
	mock.lockUpdateInstance.Unlock()
	return mock.UpdateInstanceFunc(ctx, recipeID, instanceIndex, updates)
}

// UpdateInstanceCalls gets all the calls that were made to UpdateInstance.
// Check the length with:
//     len(mockedMongoDB.UpdateInstanceCalls())
func (mock *MongoDBMock) UpdateInstanceCalls() []struct {
	Ctx           context.Context
	RecipeID      string
	InstanceIndex int
	Updates       models.Instance
} {
	var calls []struct {
		Ctx           context.Context
		RecipeID      string
		InstanceIndex int
		Updates       models.Instance
	}
	mock.lockUpdateInstance.RLock()
	calls = mock.calls.UpdateInstance
	mock.lockUpdateInstance.RUnlock()
	return calls
}

// UpdateRecipe calls UpdateRecipeFunc.
func (mock *MongoDBMock) UpdateRecipe(ctx context.Context, recipeID string, updates models.Recipe) error {
	if mock.UpdateRecipeFunc == nil {
		panic("MongoDBMock.UpdateRecipeFunc: method is nil but MongoDB.UpdateRecipe was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		RecipeID string
		Updates  models.Recipe
	}{
		Ctx:      ctx,
		RecipeID: recipeID,
		Updates:  updates,
	}
	mock.lockUpdateRecipe.Lock()
	mock.calls.UpdateRecipe = append(mock.calls.UpdateRecipe, callInfo)
	mock.lockUpdateRecipe.Unlock()
	return mock.UpdateRecipeFunc(ctx, recipeID, updates)
}

// UpdateRecipeCalls gets all the calls that were made to UpdateRecipe.
// Check the length with:
//     len(mockedMongoDB.UpdateRecipeCalls())
func (mock *MongoDBMock) UpdateRecipeCalls() []struct {
	Ctx      context.Context
	RecipeID string
	Updates  models.Recipe
} {
	var calls []struct {
		Ctx      context.Context
		RecipeID string
		Updates  models.Recipe
	}
	mock.lockUpdateRecipe.RLock()
	calls = mock.calls.UpdateRecipe
	mock.lockUpdateRecipe.RUnlock()
	return calls
}
