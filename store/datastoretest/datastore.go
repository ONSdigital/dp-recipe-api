// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storetest

import (
	"context"
	"sync"

	"github.com/ONSdigital/dp-recipe-api/recipe"
	"github.com/ONSdigital/dp-recipe-api/store"
	"github.com/globalsign/mgo/bson"
)

var (
	lockStorerMockAddCodelist     sync.RWMutex
	lockStorerMockAddRecipe       sync.RWMutex
	lockStorerMockGetRecipe       sync.RWMutex
	lockStorerMockGetRecipes      sync.RWMutex
	lockStorerMockUpdateAllRecipe sync.RWMutex
	lockStorerMockUpdateCodelist  sync.RWMutex
	lockStorerMockUpdateInstance  sync.RWMutex
	lockStorerMockUpdateRecipe    sync.RWMutex
)

// Ensure, that StorerMock does implement Storer.
// If this is not the case, regenerate this file with moq.
var _ store.Storer = &StorerMock{}

// StorerMock is a mock implementation of store.Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked store.Storer
//         mockedStorer := &StorerMock{
//             AddCodelistFunc: func(recipeID string, instanceIndex int, currentRecipe *recipe.Response) error {
// 	               panic("mock out the AddCodelist method")
//             },
//             AddInstanceFunc: func(recipeID string, currentRecipe *recipe.Response) error {
// 	               panic("mock out the AddInstance method")
//             },
//             AddRecipeFunc: func(item recipe.Response) error {
// 	               panic("mock out the AddRecipe method")
//             },
//             GetRecipeFunc: func(id string) (*recipe.Response, error) {
// 	               panic("mock out the GetRecipe method")
//             },
//             GetRecipesFunc: func(ctx context.Context) ([]recipe.Response, error) {
// 	               panic("mock out the GetRecipes method")
//             },
//             UpdateAllRecipeFunc: func(id string, update bson.M) error {
// 	               panic("mock out the UpdateAllRecipe method")
//             },
//             UpdateCodelistFunc: func(recipeID string, instanceIndex int, codelistIndex int, updates recipe.CodeList) error {
// 	               panic("mock out the UpdateCodelist method")
//             },
//             UpdateInstanceFunc: func(recipeID string, instanceIndex int, updates recipe.Instance) error {
// 	               panic("mock out the UpdateInstance method")
//             },
//             UpdateRecipeFunc: func(recipeID string, updates recipe.Response) error {
// 	               panic("mock out the UpdateRecipe method")
//             },
//         }
//
//         // use mockedStorer in code that requires store.Storer
//         // and then make assertions.
//
//     }
type StorerMock struct {
	// AddCodelistFunc mocks the AddCodelist method.
	AddCodelistFunc func(recipeID string, instanceIndex int, currentRecipe *recipe.Response) error

	// AddRecipeFunc mocks the AddRecipe method.
	AddRecipeFunc func(item recipe.Response) error

	// GetRecipeFunc mocks the GetRecipe method.
	GetRecipeFunc func(id string) (*recipe.Response, error)

	// GetRecipesFunc mocks the GetRecipes method.
	GetRecipesFunc func(ctx context.Context) ([]recipe.Response, error)

	// UpdateAllRecipeFunc mocks the UpdateAllRecipe method.
	UpdateAllRecipeFunc func(id string, update bson.M) error

	// UpdateCodelistFunc mocks the UpdateCodelist method.
	UpdateCodelistFunc func(recipeID string, instanceIndex int, codelistIndex int, updates recipe.CodeList) error

	// UpdateInstanceFunc mocks the UpdateInstance method.
	UpdateInstanceFunc func(recipeID string, instanceIndex int, updates recipe.Instance) error

	// UpdateRecipeFunc mocks the UpdateRecipe method.
	UpdateRecipeFunc func(recipeID string, updates recipe.Response) error

	// calls tracks calls to the methods.
	calls struct {
		// AddCodelist holds details about calls to the AddCodelist method.
		AddCodelist []struct {
			// RecipeID is the recipeID argument value.
			RecipeID string
			// InstanceIndex is the instanceIndex argument value.
			InstanceIndex int
			// CurrentRecipe is the currentRecipe argument value.
			CurrentRecipe *recipe.Response
		}
		// AddRecipe holds details about calls to the AddRecipe method.
		AddRecipe []struct {
			// Item is the item argument value.
			Item recipe.Response
		}
		// GetRecipe holds details about calls to the GetRecipe method.
		GetRecipe []struct {
			// ID is the id argument value.
			ID string
		}
		// GetRecipes holds details about calls to the GetRecipes method.
		GetRecipes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateAllRecipe holds details about calls to the UpdateAllRecipe method.
		UpdateAllRecipe []struct {
			// ID is the id argument value.
			ID string
			// Update is the update argument value.
			Update bson.M
		}
		// UpdateCodelist holds details about calls to the UpdateCodelist method.
		UpdateCodelist []struct {
			// RecipeID is the recipeID argument value.
			RecipeID string
			// InstanceIndex is the instanceIndex argument value.
			InstanceIndex int
			// CodelistIndex is the codelistIndex argument value.
			CodelistIndex int
			// Updates is the updates argument value.
			Updates recipe.CodeList
		}
		// UpdateInstance holds details about calls to the UpdateInstance method.
		UpdateInstance []struct {
			// RecipeID is the recipeID argument value.
			RecipeID string
			// InstanceIndex is the instanceIndex argument value.
			InstanceIndex int
			// Updates is the updates argument value.
			Updates recipe.Instance
		}
		// UpdateRecipe holds details about calls to the UpdateRecipe method.
		UpdateRecipe []struct {
			// RecipeID is the recipeID argument value.
			RecipeID string
			// Updates is the updates argument value.
			Updates recipe.Response
		}
	}
}

// AddCodelist calls AddCodelistFunc.
func (mock *StorerMock) AddCodelist(recipeID string, instanceIndex int, currentRecipe *recipe.Response) error {
	if mock.AddCodelistFunc == nil {
		panic("StorerMock.AddCodelistFunc: method is nil but Storer.AddCodelist was just called")
	}
	callInfo := struct {
		RecipeID      string
		InstanceIndex int
		CurrentRecipe *recipe.Response
	}{
		RecipeID:      recipeID,
		InstanceIndex: instanceIndex,
		CurrentRecipe: currentRecipe,
	}
	lockStorerMockAddCodelist.Lock()
	mock.calls.AddCodelist = append(mock.calls.AddCodelist, callInfo)
	lockStorerMockAddCodelist.Unlock()
	return mock.AddCodelistFunc(recipeID, instanceIndex, currentRecipe)
}

// AddCodelistCalls gets all the calls that were made to AddCodelist.
// Check the length with:
//     len(mockedStorer.AddCodelistCalls())
func (mock *StorerMock) AddCodelistCalls() []struct {
	RecipeID      string
	InstanceIndex int
	CurrentRecipe *recipe.Response
} {
	var calls []struct {
		RecipeID      string
		InstanceIndex int
		CurrentRecipe *recipe.Response
	}
	lockStorerMockAddCodelist.RLock()
	calls = mock.calls.AddCodelist
	lockStorerMockAddCodelist.RUnlock()
	return calls
}

// AddRecipe calls AddRecipeFunc.
func (mock *StorerMock) AddRecipe(item recipe.Response) error {
	if mock.AddRecipeFunc == nil {
		panic("StorerMock.AddRecipeFunc: method is nil but Storer.AddRecipe was just called")
	}
	callInfo := struct {
		Item recipe.Response
	}{
		Item: item,
	}
	lockStorerMockAddRecipe.Lock()
	mock.calls.AddRecipe = append(mock.calls.AddRecipe, callInfo)
	lockStorerMockAddRecipe.Unlock()
	return mock.AddRecipeFunc(item)
}

// AddRecipeCalls gets all the calls that were made to AddRecipe.
// Check the length with:
//     len(mockedStorer.AddRecipeCalls())
func (mock *StorerMock) AddRecipeCalls() []struct {
	Item recipe.Response
} {
	var calls []struct {
		Item recipe.Response
	}
	lockStorerMockAddRecipe.RLock()
	calls = mock.calls.AddRecipe
	lockStorerMockAddRecipe.RUnlock()
	return calls
}

// GetRecipe calls GetRecipeFunc.
func (mock *StorerMock) GetRecipe(id string) (*recipe.Response, error) {
	if mock.GetRecipeFunc == nil {
		panic("StorerMock.GetRecipeFunc: method is nil but Storer.GetRecipe was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockStorerMockGetRecipe.Lock()
	mock.calls.GetRecipe = append(mock.calls.GetRecipe, callInfo)
	lockStorerMockGetRecipe.Unlock()
	return mock.GetRecipeFunc(id)
}

// GetRecipeCalls gets all the calls that were made to GetRecipe.
// Check the length with:
//     len(mockedStorer.GetRecipeCalls())
func (mock *StorerMock) GetRecipeCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockStorerMockGetRecipe.RLock()
	calls = mock.calls.GetRecipe
	lockStorerMockGetRecipe.RUnlock()
	return calls
}

// GetRecipes calls GetRecipesFunc.
func (mock *StorerMock) GetRecipes(ctx context.Context) ([]recipe.Response, error) {
	if mock.GetRecipesFunc == nil {
		panic("StorerMock.GetRecipesFunc: method is nil but Storer.GetRecipes was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStorerMockGetRecipes.Lock()
	mock.calls.GetRecipes = append(mock.calls.GetRecipes, callInfo)
	lockStorerMockGetRecipes.Unlock()
	return mock.GetRecipesFunc(ctx)
}

// GetRecipesCalls gets all the calls that were made to GetRecipes.
// Check the length with:
//     len(mockedStorer.GetRecipesCalls())
func (mock *StorerMock) GetRecipesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStorerMockGetRecipes.RLock()
	calls = mock.calls.GetRecipes
	lockStorerMockGetRecipes.RUnlock()
	return calls
}

// UpdateAllRecipe calls UpdateAllRecipeFunc.
func (mock *StorerMock) UpdateAllRecipe(id string, update bson.M) error {
	if mock.UpdateAllRecipeFunc == nil {
		panic("StorerMock.UpdateAllRecipeFunc: method is nil but Storer.UpdateAllRecipe was just called")
	}
	callInfo := struct {
		ID     string
		Update bson.M
	}{
		ID:     id,
		Update: update,
	}
	lockStorerMockUpdateAllRecipe.Lock()
	mock.calls.UpdateAllRecipe = append(mock.calls.UpdateAllRecipe, callInfo)
	lockStorerMockUpdateAllRecipe.Unlock()
	return mock.UpdateAllRecipeFunc(id, update)
}

// UpdateAllRecipeCalls gets all the calls that were made to UpdateAllRecipe.
// Check the length with:
//     len(mockedStorer.UpdateAllRecipeCalls())
func (mock *StorerMock) UpdateAllRecipeCalls() []struct {
	ID     string
	Update bson.M
} {
	var calls []struct {
		ID     string
		Update bson.M
	}
	lockStorerMockUpdateAllRecipe.RLock()
	calls = mock.calls.UpdateAllRecipe
	lockStorerMockUpdateAllRecipe.RUnlock()
	return calls
}

// UpdateCodelist calls UpdateCodelistFunc.
func (mock *StorerMock) UpdateCodelist(recipeID string, instanceIndex int, codelistIndex int, updates recipe.CodeList) error {
	if mock.UpdateCodelistFunc == nil {
		panic("StorerMock.UpdateCodelistFunc: method is nil but Storer.UpdateCodelist was just called")
	}
	callInfo := struct {
		RecipeID      string
		InstanceIndex int
		CodelistIndex int
		Updates       recipe.CodeList
	}{
		RecipeID:      recipeID,
		InstanceIndex: instanceIndex,
		CodelistIndex: codelistIndex,
		Updates:       updates,
	}
	lockStorerMockUpdateCodelist.Lock()
	mock.calls.UpdateCodelist = append(mock.calls.UpdateCodelist, callInfo)
	lockStorerMockUpdateCodelist.Unlock()
	return mock.UpdateCodelistFunc(recipeID, instanceIndex, codelistIndex, updates)
}

// UpdateCodelistCalls gets all the calls that were made to UpdateCodelist.
// Check the length with:
//     len(mockedStorer.UpdateCodelistCalls())
func (mock *StorerMock) UpdateCodelistCalls() []struct {
	RecipeID      string
	InstanceIndex int
	CodelistIndex int
	Updates       recipe.CodeList
} {
	var calls []struct {
		RecipeID      string
		InstanceIndex int
		CodelistIndex int
		Updates       recipe.CodeList
	}
	lockStorerMockUpdateCodelist.RLock()
	calls = mock.calls.UpdateCodelist
	lockStorerMockUpdateCodelist.RUnlock()
	return calls
}

// UpdateInstance calls UpdateInstanceFunc.
func (mock *StorerMock) UpdateInstance(recipeID string, instanceIndex int, updates recipe.Instance) error {
	if mock.UpdateInstanceFunc == nil {
		panic("StorerMock.UpdateInstanceFunc: method is nil but Storer.UpdateInstance was just called")
	}
	callInfo := struct {
		RecipeID      string
		InstanceIndex int
		Updates       recipe.Instance
	}{
		RecipeID:      recipeID,
		InstanceIndex: instanceIndex,
		Updates:       updates,
	}
	lockStorerMockUpdateInstance.Lock()
	mock.calls.UpdateInstance = append(mock.calls.UpdateInstance, callInfo)
	lockStorerMockUpdateInstance.Unlock()
	return mock.UpdateInstanceFunc(recipeID, instanceIndex, updates)
}

// UpdateInstanceCalls gets all the calls that were made to UpdateInstance.
// Check the length with:
//     len(mockedStorer.UpdateInstanceCalls())
func (mock *StorerMock) UpdateInstanceCalls() []struct {
	RecipeID      string
	InstanceIndex int
	Updates       recipe.Instance
} {
	var calls []struct {
		RecipeID      string
		InstanceIndex int
		Updates       recipe.Instance
	}
	lockStorerMockUpdateInstance.RLock()
	calls = mock.calls.UpdateInstance
	lockStorerMockUpdateInstance.RUnlock()
	return calls
}

// UpdateRecipe calls UpdateRecipeFunc.
func (mock *StorerMock) UpdateRecipe(recipeID string, updates recipe.Response) error {
	if mock.UpdateRecipeFunc == nil {
		panic("StorerMock.UpdateRecipeFunc: method is nil but Storer.UpdateRecipe was just called")
	}
	callInfo := struct {
		RecipeID string
		Updates  recipe.Response
	}{
		RecipeID: recipeID,
		Updates:  updates,
	}
	lockStorerMockUpdateRecipe.Lock()
	mock.calls.UpdateRecipe = append(mock.calls.UpdateRecipe, callInfo)
	lockStorerMockUpdateRecipe.Unlock()
	return mock.UpdateRecipeFunc(recipeID, updates)
}

// UpdateRecipeCalls gets all the calls that were made to UpdateRecipe.
// Check the length with:
//     len(mockedStorer.UpdateRecipeCalls())
func (mock *StorerMock) UpdateRecipeCalls() []struct {
	RecipeID string
	Updates  recipe.Response
} {
	var calls []struct {
		RecipeID string
		Updates  recipe.Response
	}
	lockStorerMockUpdateRecipe.RLock()
	calls = mock.calls.UpdateRecipe
	lockStorerMockUpdateRecipe.RUnlock()
	return calls
}
